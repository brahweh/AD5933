#include <Wire.h>
#include <SPI.h>
#include <SD.h>
#include <math.h>
#define AD5933ADDR 0x0D  //address
#define CNTRLREGISTER 0x80  //control register MSBs

void setup() {
  Wire.begin();
  Serial.begin(9600);

  //some global vars?
  const int dtime = 10;  //delay between I2C operations
  const int CS = 10;  //pin select for CS
  const float pi = 3.14159265;

  const int D0 = A0;
  const int D1 = A1;

  int myregister = 0;
  int myregisterval = 0;


  //initialize SD card and make a file
  if (!SD.begin(CS)) {
    Serial.println("Card failed to read");
    return;
  }

  Serial.println("Card initialized");

  writeSD("BioFLEX Firmware v9.0");
  writeSD("AD5933 Interface Software for BioFLEX");
  writeSD("TH - Biomedical Microsystems Lab (Meng Lab)");
  writeSD(String(hour()) + ":" + String(minute()) + ":" + String(second()));
  writeSD(String(day()) + "/" + String(month()) + "/" + String(year()));
  writeSD("");

}


void main() {

  pinMode(D0, OUTPUT);  //corresponds to logic A
  pinMode(D1, OUTPUT);  //logic B

  //flow1

  digitalWrite(D0, LOW);
  digitalWrite(D1, LOW);

  do stuff

  //flow2

  digitalWrite(D0, HIGH);
  digitalWrite(D1, LOW);

  //pressure

  digitalWrite(D0, LOW);
  digitalWrite(D1, HIGH);

  //patency

  digitalWrite(D0, HIGH);
  digitalWrite(D1, HIGH;


}



void freqsweepfunction() {

  int cycle_status = 0;
  int cycle_bit = 0;
  int real_read = 0;
  int imag_read = 0;
  int freq_status = 0;
  int freq_bit = 0;

  float imp_mag = 0;
  double imp_phase = 0;
  float gain_factor = 123.456  //this could be calculated w/ auto calibration step

    //activation protocol for AD5933

  //enter standby mode
  //  Wire.beginTransmission(AD5933ADDR);
  //  Wire.write(CNTRLREGISTER); //control register MSBs
  //  Wire.write(0xB0); //standby mode: 10110000 (bin)
  //  Wire.endTransmission();
  //  delayMicroseconds(dtime);

  //assign start frequency registry
  wirewriteloop(0x82, 0x00); //start freq: 1kHz = 33554 (dec) = 0x008312 (hex)

  wirewriteloop(0x83, 0x83);

  wirewriteloop(0x84, 0x12);

  //number of increments register
  wirewriteloop(0x89, 0x14);

  //frequency increment register
  wirewriteloop(0x85, 0x05);  //freq increments: 10 kHz = 335544 (dec) = 0x051EB8 (hex)

  wirewriteloop(0x86, 0x1E);

  wirewriteloop(0x87, 0xB8);

  //assign settling time cycles (not sure that this should go here)
  wirewriteloop(0x8A, 0x07);  //00000111(bin), x4 cycles

  wirewriteloop(0x8B, 0xFF);

  //control: enter standby mode (spec sheet says use a reset instead, test this if nec)
  wirewriteloop(CNTRLREGISTER, 0xB0);  //standby mode: 1011 0000

  //control: initialize with start frequency
  wirewriteloop(CNTRLREGISTER, 0x10);  //init w start freq: 0001 0000

  delay(10000);  //settling time



  //frequency sweep part

  //control: start frequency sweep
  wirewriteloop(CNTRLREGISTER, 0x20);  //init w start freq: 0010 0000



  while (!freq_bit) {
    //poll status register at cycle complete bit//////////////////////////////////////////////
    //place pointer on status register
    Wire.beginTransmission(AD5933ADDR);
    Wire.write(byte(0x8F));  //place I2C pointer on status register
    Wire.endTransmission();

    //request status
    Wire.requestFrom(AD5933ADR, 1);  //request one byte (there should only be one byte at this register)

    //receive status
    if (Wire.available()) { //if one byte was received
      cycle_status = Wire.read();  //receive byte
      cycle_bit = bitRead(cycle_status, 1);  //read bit D1

      if (cycle_bit) {  //if cycle is complete and data available


        //real data acquisition

        Wire.beginTransmission(AD5933ADDR);
        Wire.write(byte(0x94));  //point to real data MSB
        Wire.endTransmission();

        Wire.requestFrom(AD5933ADR, 1);

        if (Wire.available()) {
          real_read = Wire.read();
          real_read = real_read << 8;
        }

        Wire.beginTransmission(AD5933ADDR);
        Wire.write(byte(0x95));  //point to real data LSB
        Wire.endTransmission();

        Wire.requestFrom(ADR5933ADDR, 1);

        if (Wire.available()) {
          real_read |= Wire.read();
        }

        //imaginary data acquisition

        Wire.beginTransmission(AD5933ADDR);
        Wire.write(byte(0x96));  //point to imag data MSB
        Wire.endTransmission();

        Wire.requestFrom(AD5933ADR, 1);

        if (Wire.available()) {
          imag_read = Wire.read();
          imag_read = imag_read << 8;
        }

        Wire.beginTransmission(AD5933ADDR);
        Wire.write(byte(0x97));  //point to imag data LSB
        Wire.endTransmission();

        Wire.requestFrom(ADR5933ADDR, 1);

        if (Wire.available()) {
          imag_read |= Wire.read();
        }

        //imp magnitude and phase calculation and storage

        imp_mag = sqrt(sq(real_read) + sq(imag_read));
        imp_mag = 1 / (gain_factor * imp_mag);

        if (imag_read >= 0)
        {
          if (real_read) >= 0 //first quadrant
          {
            imp_phase = double atan2(imag_read, real_read) * (180 / pi);
          }
          else
          {
            imp_phase = 180 + double atan2(imag_read, real_read) * (180 / pi);
          }
        }
        else
        {
          if (real_read) <= 0
          {
            imp_phase = 180 + double atan2(imag_read, real_read) * (180 / pi);
          }
          else
          {
            imp_phase = 360 + double atan2(imag_read, real_read) * (180 / pi);
          }
        }

        i = 0;  //measurement number index
        output = "";
        output = String(i) + " " + String(imp + mag) + " " + String(imp_phase);
        writeSD(output);
        i++;

        //increment frequency command
        wirewriteloop(CNTRLREGISTER, 0x30);  //increment frequency: 00110000(bin)

      }
    }


    //poll status register at frequency sweep bit
    Wire.beginTransmission(AD5933ADDR);
    Wire.write(byte(0x8F));  //point at status register
    Wire.endTransmission();

    Wire.requestFrom(ADR5933ADDR, 1);

    if (Wire.available()) {
      freq_status = Wire.read();
      freq_bit = bitRead(freq_status, 2);  //read bit D2
    }
  }
}


void wirewriteloop(myregister, myregisterval) {
  Wire.beginTransmission(AD5933ADDR);
  Wire.write(byte(myregister));
  Wire.write(byte(myregisterval));
  Wire.endTransmission();
  delayMicroseconds(dtime);
}








